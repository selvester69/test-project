schema {
  query: Query
  mutation: Mutation
}

type Query {
  getUserProfile(userId: ID!): UserPublic
  queryUsers(filters: UserFilterInput): [UserPublic!]!
}

type Mutation {
  suspendUser(userId: ID!, reason: String): UserPublic
}

input UserFilterInput {
    status: String
    date: String
}

type UserPublic {
  id: ID!
  username: String!
  email: String!
  fullName: String!
  fname: String
  lname: String
  address: String
  phoneNumber: String
  status: String!
  accountType: String
  subscriptionTier: String
  subscriptionExpiresAt: String
  lastLoginAt: String
  lastActivityAt: String
  loginAttempts: Int
  accountLockedUntil: String
  activityScore: Int
  riskScore: Int
  preferences: UserPreferences!
  tags: [String!]!
  segment: String
  createdAt: String
  updatedAt: String
}

type UserPreferences {
  notifications: UserNotificationSettings!
  privacy: UserPrivacySettings!
}

type UserNotificationSettings {
  email: Boolean!
  sms: Boolean!
  push: Boolean!
  marketing: Boolean!
}

type UserPrivacySettings {
  profileVisible: Boolean!
  shareData: Boolean!
  trackingEnabled: Boolean!
}