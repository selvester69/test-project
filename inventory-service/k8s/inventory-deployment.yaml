apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-service
  labels:
    app: inventory-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app: inventory-service
  template:
    metadata:
      labels:
        app: inventory-service
    spec:
      containers:
      - name: inventory-service
        image: inventoryservice:latest
        ports:
        - containerPort: 8084
          name: http-rest
        - containerPort: 9090
          name: grpc
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "production"
        - name: SPRING_DATASOURCE_URL
          valueFrom:
            secretKeyRef:
              name: inventory-db-secret
              key: url
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: inventory-db-secret
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: inventory-db-secret
              key: password
        - name: SPRING_REDIS_HOST
          value: "redis-cluster"
        - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-cluster:9092"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8084
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8084
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: inventory-config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: inventory-config
        configMap:
          name: inventory-config
      imagePullSecrets:
      - name: registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: inventory-service
  labels:
    app: inventory-service
spec:
  selector:
    app: inventory-service
  ports:
  - name: http
    port: 8084
    targetPort: 8084
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: inventory-service-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: inventory-service
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: packets-per-second
      target:
        type: AverageValue
        averageValue: 100
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Pods
        value: 4
        periodSeconds: 60
      - type: Percent
        value: 10
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: inventory-service-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/upstream-vhost: inventory-service.default.svc.cluster.local
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "Request-Id: $req_id";
spec:
  rules:
  - host: inventory-api.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: inventory-service
            port:
              number: 8084
  tls:
  - hosts:
    - inventory-api.example.com
    secretName: inventory-tls-secret
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: inventory-config
data:
  application-production.yml: |
    server:
      port: 8084
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus,grpc
      endpoint:
        grpc:
          enabled: true
    grpc:
      server:
        port: 9090
        keep-alive-time: 60000
        keep-alive-timeout: 5000
        max-connection-age: 600000
        max-connection-idle: 60000
        permit-keep-alive-without-calls: true
        max-message-size: 4194304
        max-header-list-size: 8192
    spring:
      redis:
        cluster:
          nodes: redis-cluster-node-1:6379,redis-cluster-node-2:6380,redis-cluster-node-3:6381
          max-redirects: 3
      cache:
        redis:
          time-to-live: 300000  # 5 minutes
          cache-null-values: false
      kafka:
        producer:
          retries: 5
          max-in-flight-requests-per-connection: 1
        consumer:
          max-poll-records: 100
          fetch-min-size: 1
          fetch-max-wait: 500
    logging:
      level:
        com.example.inventoryservice: INFO
        org.springframework.kafka: WARN
        io.grpc: INFO
        net.devh: DEBUG
    resilience4j:
      circuitbreaker:
        instances:
          database:
            sliding-window-size: 10
            failure-rate-threshold: 50
            wait-duration-in-open-state: 30s
            permitted-number-of-calls-in-half-open-state: 3
          kafka:
            sliding-window-size: 10
            failure-rate-threshold: 50
            wait-duration-in-open-state: 30s
      retry:
        instances:
          stock-check:
            max-attempts: 3
            wait-duration: 500ms
            retry-exceptions:
            - java.util.concurrent.TimeoutException
            - org.springframework.dao.DeadlockLoserDataAccessException
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: inventory-db-read-replica
  labels:
    app: inventory-db-read-replica
spec:
  replicas: 2
  selector:
    matchLabels:
      app: inventory-db-read-replica
  template:
    metadata:
      labels:
        app: inventory-db-read-replica
    spec:
      containers:
      - name: postgres
        image: postgres:15
        env:
        - name: POSTGRES_DB
          value: inventorydb
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: inventory-db-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: inventory-db-secret
              key: password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: inventory-db-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: inventory-db-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: inventory-db-secret
type: Opaque
data:
  username: cG9zdGdyZXM=  # postgres base64 encoded
  password: cGFzc3dvcmQ=  # password base64 encoded
  url: amRiYzpwb3N0Z3Jlc3FsOi9pbnZlbnRvcnlkYjpwb3N0Z3Jlc3NAcG9zdGdyZXM6NTQzMg==  # jdbc:postgresql://postgres:5432/inventorydb base64